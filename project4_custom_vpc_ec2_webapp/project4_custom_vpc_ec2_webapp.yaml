# How to Deploy this CloudFormation Template
#
# Option 1: AWS Management Console
# 1. Go to CloudFormation > Create stack > With new resources (standard).
# 2. Upload this file and follow the prompts.
#
# Option 2: AWS CLI
# 1. aws cloudformation create-stack --stack-name custom-vpc-ec2-webapp --template-body file://project4_custom_vpc_ec2_webapp.yaml --parameters ParameterKey=KeyName,ParameterValue=your-keypair
# 2. aws cloudformation describe-stacks --stack-name custom-vpc-ec2-webapp
#
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates a custom VPC, public/private subnets, security group, network ACL, and deploys a simple web server on EC2.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName  # Name of an existing EC2 KeyPair to enable SSH access
    Description: Name of an existing EC2 KeyPair to enable SSH access

Resources:
  CustomVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16  # The IP range for the VPC
      EnableDnsSupport: true  # Enables DNS support
      EnableDnsHostnames: true  # Enables DNS hostnames
      Tags:
        - Key: Name
          Value: CustomVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CustomVPC
      CidrBlock: 10.0.1.0/24  # Public subnet IP range
      MapPublicIpOnLaunch: true  # Assign public IPs to instances launched here
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CustomVPC
      CidrBlock: 10.0.2.0/24  # Private subnet IP range
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CustomVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CustomVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # Route all traffic to the internet
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref CustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH from anywhere (for demo; restrict in production)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow HTTP from anywhere

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref CustomVPC

  PublicNetworkAclEntryInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  PublicNetworkAclEntryInboundSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 110
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  PublicNetworkAclEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 120
      Protocol: -1  # All protocols
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref PublicNetworkAcl

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro  # Free tier eligible
      KeyName: !Ref KeyName  # SSH key pair
      SubnetId: !Ref PublicSubnet
      ImageId: ami-0c803b171269e2d72 # Amazon Linux 2 in us-east-1; update for your region if needed
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Welcome to your custom VPC web server!</h1>" > /var/www/html/index.html

Outputs:
  WebServerPublicIP:
    Description: Public IP of the web server
    Value: !GetAtt WebServerInstance.PublicIp 